plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2023.4.2"
    // Custom modifications
    id "maven-publish"
    id 'com.diffplug.spotless' version '6.14.1'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "com.frc5113.robot.Main"
def cVersion = '2.0.1'

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

// Custom Modificaitons
// Javadoc builds to build
//sourceSets {
//    main {
//        java {
//            srcDirs = ['src/main/java']
//        }
//    }
//}
//
//javadoc {
//    source = sourceSets.main.allJava
//    destinationDir = reporting.file("./docs")
//}

repositories {
    mavenCentral()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/FRC5113/Library"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.frc5113'
            artifactId = 'library'
            version = cVersion

            from components.java
        }
    }
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.register('generateVendorDep') {
    doLast {
        new File(projectDir, "libraryBuilds/repo/Library5113.json").text = """{
    "fileName": "Library5113.json",
    "name": "Library5113",
    "version": "$cVersion",
    "uuid": "85bf4f52-0ccb-4187-807e-1dca1a96e689",
    "mavenUrls": [
        "https://frc5113.github.io/LibraryBuilds/repo/"
    ],
    "jsonUrl": "https://frc5113.github.io/LibraryBuilds/repo/Library5113.json",
    "javaDependencies": [
        {
            "groupId": "com.frc5113",
            "artifactId": "library",
            "version": "$cVersion"
        }
    ],
    "jniDependencies": [],
    "cppDependencies": []
}
"""
    }
}

tasks.register('generateVendorDepBeta') {
    doLast {
        def stdout = new ByteArrayOutputStream()

        // Execute the git command
        exec {
            commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
            // Write to the output stream instead of terminal
            standardOutput = stdout
        }

        // Parse the output into a string
        def branch = stdout.toString().trim()

        // create file in repo
        new File(projectDir, "./libraryBuilds/rcrepo/$branch/Library5113Beta.json").text = """{
    "fileName": "Library5113Beta.json",
    "name": "Library5113Beta",
    "version": "$cVersion",
    "uuid": "5869a73f-d175-403d-9107-8ce1766835ba",
    "mavenUrls": [
        "https://frc5113.github.io/LibraryBuilds/rcrepo/$branch/"
    ],
    "jsonUrl": "https://frc5113.github.io/LibraryBuilds/rcrepo/$branch/Library5113Beta.json",
    "javaDependencies": [
        {
            "groupId": "com.frc5113",
            "artifactId": "library",
            "version": "$cVersion"
        }
    ],
    "jniDependencies": [],
    "cppDependencies": []
}
"""
    }
}

// configure the formatting
// see: https://docs.wpilib.org/en/stable/docs/software/advanced-gradlerio/code-formatting.html
spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'xml', {
        target fileTree('.') {
            include '**/*.xml'
            exclude '**/build/**', '**/build-*/**'
        }
        eclipseWtp('xml')
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}

// register the tasks to build and deploy
tasks.named('build') {
    dependsOn('spotlessApply')
}

tasks.named('deploy') {
    dependsOn('spotlessApply')
}
